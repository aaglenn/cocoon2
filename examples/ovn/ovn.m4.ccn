include(`tables.ccn')
include(`views.ccn')
undefine(`eval')

switch SChassis[Chassis]

port PVSwitchPort[VSwitchPort](source vSwitchIngress, sink)
port PTunnelPort[TunnelPort](source tunIngress, sink)

procedure vSwitchIngress(port: VSwitchPort): sink = {
    var lport : LogicalSwitchPort;
    if (pkt.vlan.vid == 0) {
        the (p in LogicalSwitchPort | p.id == port.lport and p.enabled) {
            lport = p
        } default { drop }
    } else {
        // trunk port? find VIF interface; strip vlan tag
        the (p in LogicalSwitchPort | match (p.ptype) { 
                                          LPortVIF{parent,_,tag} -> parent == p.id and tag == pkt.vlan.vid and p.enabled,
                                          _ -> false
                                      } ) {
            lport = p;
            pkt.vlan.vid = 0
        } default { drop }
    };
   
    lportIngress(port, lport)
}


// XXX: TODO: QoS marking
procedure lportIngress(vport: VSwitchPort, lport: LogicalSwitchPort): sink = {
    if (not ingressPortSecurity(lport, pkt)) drop;

    /* Run through connection tracker if needed */
    ingressConnTrack(lport);

    /* acl */
    (var allowed, var commit) = acl(lport, ACLFrom);
    if (not allowed) drop;

    /* load balancing */
    ingressLB(lport, commit);

    /* ARP/ND */
    var arpresp = arp(lport);
    if (arpresp) { bounce(vport, lport) };

    /* DHCP/DNS */
    match (pkt.payload) {
        EthIP4{IP4Pkt{_,_,_,_,_,_,_,_,_,_, IPUDP{UDPPkt{src, dst, _, _}}}} -> if (src == 68 and dst == 67)   { dhcp4(lport.id) } else { () },
        EthIP6{IP6Pkt{_,_,_,_,_,_,_, IPUDP{UDPPkt{src, dst, _, _}}}}       -> if (src == 546 and dst == 547) { dhcp6(lport.id) } else { () },
        _   -> ()
    };

    if pktIsDNSReq(pkt) {
        dns(lport.id)
    };

    /* destination lookup */
    dstLookup(vport, lport)
}

function ingressPortSecurity(lport: LogicalSwitchPort, p: Packet): bool = {
    /* Ingress table 0 contains these logical flows:
        · Priority 100 flows to drop packets with VLAN tags or mul‐
          ticast Ethernet source addresses.

        · Priority  50  flows  that implement ingress port security
          for each enabled logical port. For logical ports on which
          port  security is enabled, these match the inport and the
          valid eth.src address(es) and advance only those  packets
          to  the  next flow table. For logical ports on which port
          security is not enabled, these advance all  packets  that
          match the inport.

        There  are no flows for disabled logical ports because the default-drop
        behavior of logical flow tables causes packets that ingress  from  them
        to be dropped. 
    */
    if (ethMulticastAddr(p.src)) {
        false 
    } else { 
        the (psec in PortSecurityType | psec.lport == lport.id) {
            if (psec.stype == PortSecNone) { true }
            else {
                the (psecmac in PortSecurityMAC | psecmac.lport == lport.id and psecmac.mac == p.src) {
                    match ((p.payload, psec.stype)) {
                        (EthARP{_}, _)   -> portSecARP(lport, p),
                        (EthOther{_}, _) -> true,
                        (_, PortSecIP)   -> ingressPortSecIP(lport, p),
                        _                -> true
                    }
                } default { false }
            }
        }
    }
}

function ingressPortSecIP(lport: LogicalSwitchPort, p: Packet): bool = {
    /* Ingress Table 1: Ingress Port Security - IP
       Ingress table 1 contains these logical flows:
          · For each element in the port security set having one or more IPv4 or IPv6 addresses (or both),
             · Priority 90 flow to allow IPv4 traffic if it has IPv4 addresses which match the inport, valid eth.src and valid ip4.src address(es).
             · Priority 90 flow to allow IPv4 DHCP discovery traffic if it has a valid eth.src. This is necessary since  DHCP  discovery  messages are sent from the unspecified IPv4 address (0.0.0.0) since the IPv4 address has not yet been assigned.
             · Priority 90 flow to allow IPv6 traffic if it has IPv6 addresses which match the inport, valid eth.src and valid ip6.src address(es).
             · Priority  90  flow  to  allow  IPv6  DAD (Duplicate Address Detection) traffic if it has a valid eth.src. This is is necessary since DAD include requires joining an multicast group and sending neighbor solicitations for the newly assigned address. Since no address  is  yet assigned, these are sent from the unspecified IPv6 address (::).
             · Priority 80 flow to drop IP (both IPv4 and IPv6) traffic which match the inport and valid eth.src.
          · One priority-0 fallback flow that matches all packets and advances to the next table.
    */
    if (isPktDHCPDiscovery(p) or isPktDAD(p)) {
        true
    } else {
        the (psecip in PortSecurityIP | psecip.lport == lport.id and psecip.mac == p.src and ipSrcMatch(p.payload, psecip.subnet)) {
            ingressPortSecNDP(lport, p)
        } default { false }
    }
}

function ipSrcMatch(p: eth_payload_t, subnet: ip_subnet_t): bool = {
    match ((p, subnet)) {
        (EthIP4{ip4}, IPSubnet4{subnet4}) -> ip4Match(ip4.src, subnet4),
        (EthIP6{ip6}, IPSubnet6{subnet6}) -> ip6Match(ip6.src, subnet6),
        _                                 -> false
    }
}

function isPktDHCPDiscovery(p: Packet): bool = {
    match (p) {
        EthPacket {_,_,_,_,_,_,EthIP4{IP4Pkt{_,_,_,_,_,_,_,_,sip,dip,IPUDP{UDPPkt{sport,dport,_,_}}}}} -> 
            sip == 0 and dip == 32'hffffffff and sport == 68 and dport == 67,
        _                                                                                              -> false
    }
}

function isPktDAD(p: Packet): bool = {
    match (p) {
        EthPacket {_,_,_,_,_,_,EthIP6{IP6Pkt{_,_,_,_,_,sip,_,IPICMP6{ICMP6Pkt{ptype,_,_}}}}} -> ptype == 135 and sip == 0,
        _                                                                                    -> false
    }
}

/* Ingress Table 2: Ingress Port Security - Neighbor discovery
   Ingress table 2 contains these logical flows:
      · For each element in the port security set,
         · Priority  90  flow  to  allow  ARP  traffic  which  match  the inport and valid eth.src and arp.sha. If the element has one or more IPv4 addresses, then it also matches the valid arp.spa.
         · Priority 90 flow to allow IPv6 Neighbor Solicitation and Advertisement traffic which match the inport, valid eth.src and  nd.sll/nd.tll.  If the element has one or more IPv6 addresses, then it also matches the valid nd.target address(es) for Neighbor Advertisement traffic.
         · Priority 80 flow to drop ARP and IPv6 Neighbor Solicitation and Advertisement traffic which match the inport and valid eth.src.
      · One priority-0 fallback flow that matches all packets and advances to the next table.
*/
function portSecARP(lport: LogicalSwitchPort, p: Packet): bool = {
    the (psecarp in PortSecurityIP4Match | psecarp.lport == lport.id and 
                                           psecarp.mac == p.src and 
                                           match (p.payload) {
                                               EthARP{ARPPkt{_,spa,_,sha,_}} -> (psecarp.mac == sha) and ip4Match(spa, psecarp.subnet),
                                               _                             -> false
                                           } ) {
        true
    } default { false }
}

function ingressPortSecNDP(lport: LogicalSwitchPort, p: Packet): bool = {
    match (p) {
        EthPacket {_,_,_,_,_,_,EthIP6{IP6Pkt{_,_,_,_,_,_,_,IPICMP6{ICMP6Pkt{_,_,ICMP6NS{ICMP6NSPkt{_, sll}}}}}}} -> 
            the (psec in PortSecurityMAC | psec.lport == lport.id and psec.mac == p.src and psec.mac == sll) {
                true
            } default { false },
        EthPacket {_,_,_,_,_,_,EthIP6{IP6Pkt{_,_,_,_,_,_,_,IPICMP6{ICMP6Pkt{_,_,ICMP6NA{ICMP6NAPkt{target, tll}}}}}}} -> 
            the (psec in PortSecurityIP6Match | psec.lport == lport.id and psec.mac == p.src and psec.mac == tll and ip6Match(target, psec.subnet)) {
                true
            } default { false },
        _ -> true
    }
}
/*
 Ingress Table 3: from-lport Pre-ACLs
   This table prepares flows for possible stateful ACL processing in ingress table ACLs.  It contains a priority-0 flow that  simply moves traffic to the next table.  If stateful ACLs are used in the logical datapath, a priority-100 flow is added that sets a hint (with reg0[0] = 1; next;) for table Pre-stateful to send IP packets to the connection tracker before eventually  advancing to ingress table ACLs.

 Ingress Table 4: Pre-LB
   This table prepares flows for possible stateful load balancing processing in ingress table LB and Stateful.  It contains a priority-0 flow that simply moves traffic to the next table.  If load balancing rules with virtual IP addresses  (and  ports)  are configured  in  OVN_Northbound database for a logical switch datapath, a priority-100 flow is added for each configured virtual IP address VIP with a match ip && ip4.dst == VIP that sets an action reg0[0] = 1; next; to act as a hint for table Pre-stateful to send IP packets to  the  connection  tracker for packet de-fragmentation before eventually advancing to ingress table LB.

 Ingress Table 5: Pre-stateful
   This table prepares flows for all possible stateful processing in next tables.  It contains a priority-0 flow that simply moves traffic to the next table.  A priority-100 flow sends the packets to connection tracker based on a hint provided by the  previous tables (with a match for reg0[0] == 1) by using the ct_next; action.
*/

procedure ingressConnTrack(lport : LogicalSwitchPort): () = {
    var needCT = false;
    the (lp in LPortStatefulACL | lp.lport == lport.id) {
        needCT = true
    } default { () };

    the (lbvip in LPortLBVIP | lbvip.lport == lport.id and 
                               match (pkt.payload) {
                                   EthIP4{ip4} -> lbvip.vip.addr == ip4.dst,
                                   _           -> false
                               } ) {
        needCT = true
    } default { () };

    // sends the packet to connection tracker
    ct(lport.ct_zone)
}

/*
     Ingress table 6: from-lport ACLs
       Logical  flows  in this table closely reproduce those in the ACL table in the OVN_Northbound database for the from-lport direction. The priority values from the ACL table have a limited range and have 1000 added to them to leave  room  for  OVN  default flows at both higher and lower priorities.
    · allow  ACLs translate into logical flows with the next; action.  If there are any stateful ACLs on this datapath, then allow ACLs translate to ct_commit; next; (which acts as a hint for the next tables to commit the  connection to conntrack),
    · allow-related  ACLs  translate into logical flows with the ct_commit(ct_label=0/1); next; actions for new connections and reg0[1] = 1; next; for existing connections.
    · Other ACLs translate to drop; for new or untracked connections and  ct_commit(ct_label=1/1);  for  known  connections.   Setting  ct_label marks a connection as one that was previously allowed, but should no longer be allowed due to a policy change.

       This table also contains a priority 0 flow with action next;, so that ACLs allow packets by default.  If the  logical  datapath has a statetful ACL, the following flows will also be added:
    + A  priority-1  flow  that  sets the hint to commit IP traffic to the connection tracker (with action reg0[1] = 1; next;).  This is needed for the default allow policy because, while the initiator’s direction may  not  have  any stateful rules, the server’s may and then its return traffic would not be known and marked as invalid.  
    + A  priority-65535 flow that allows any traffic in the reply direction for a connection that has been committed to the connection tracker (i.e., established flows), as long as the committed flow does not  have  ct_label[0]  set.  We  only handle traffic in the reply direction here because we want all packets going in the request direction to still go through the flows that implement the currently defined policy based on ACLs.   If  a  connection  is  no longer  allowed by policy, ct_label[0] will get set and packets in the reply direction will no longer be allowed, either.
    + A priority-65535 flow that allows any traffic that is considered related to a committed flow  in  the  connection tracker  (e.g.,  an  ICMP Port Unreachable from a non-listening UDP port), as long as the committed flow does not have ct_label[0] set.
    + A priority-65535 flow that drops all traffic marked by the connection tracker as invalid.
    + A priority-65535 flow that drops all trafic in the reply direction with ct_label[0] set meaning that the  connection  should  no  longer be allowed due to a policy change.  Packets in the request direction are skipped here to let a newly created ACL re-allow this connection.
*/
procedure acl(lport : LogicalSwitchPort, dir : acl_dir_t) : (bool, bool) = {
    // XXX: how to determine if the logical datapath has a stateful ACL
    if (ct_inv()) {
        (false, false)
    } else if ((not ct_new()) and ct_rpl() and (ct_label()[0:0] == 0)) {
        (true, true)
    } else if (ct_rel() and (ct_label()[0:0] == 0)) {
        (true, true)
    } else if (ct_rpl() and (ct_label()[0:0] == 1)) {
        (false, false)
    } else {
        the (acl in ACL | eval(acl.match_cond)(pkt) and acl.lswitch == lport.lswitch and acl.direction == dir) {
            match (acl.action) {
                ACLAllow        -> (true, true),
                ACLAllowRelated -> 
                    if (ct_new()) {
                        (true, true)
                    } else {
                        ct_commit(lport.ct_zone, 128'd0); 
                        (true, false)
                    },
                _               ->  
                    if (ct_new()) {
                        (false, false)
                    } else {
                        ct_commit(lport.ct_zone, 128'd1); 
                        (false, false)
                    }
            }
        } default {
            if pktIsIP(pkt) {
                (true, true)
            } else {
                (true, false)
            }
        }
    }
}

/* Ingress Table 8: LB
    It  contains a priority-0 flow that simply moves traffic to the next table. For established connections a priority 100 flow matches on ct.est && !ct.rel && !ct.new && !ct.inv and sets an action reg0[2] = 1; next; to act as a hint for table Stateful to send packets through connection tracker to NAT the packets. (The packet will automatically get DNATed to the same IP address as the first packet in that connection.)

    Ingress Table 9: Stateful
    · For all the configured load balancing rules for a switch in OVN_Northbound database that includes a L4 port PORT of protocol P and IPv4 address VIP, a priority-120 flow that matches on ct.new && ip && ip4.dst == VIP && P && P.dst == PORT with an action of ct_lb(args), where args contains comma separated IPv4 addresses (and optional port numbers) to load balance to.
    · For all the configured load balancing rules for a switch in OVN_Northbound database that includes just an IP address VIP to match on, a priority-110 flow that matches on ct.new && ip && ip4.dst == VIP with an action of ct_lb(args), where  args  contains  comma  separated  IPv4 addresses.
    · A priority-100 flow commits packets to connection tracker using ct_commit; next; action based on a hint provided by the previous tables (with a match for reg0[1] == 1).
    · A priority-100 flow sends the packets to connection tracker using ct_lb; as the action based on a hint provided by the previous tables (with a match for reg0[2] == 1).
    · A priority-0 flow that simply moves traffic to the next table.
 */
procedure ingressLB(lport : LogicalSwitchPort, commit : bool) : () = {
    any (lb in LPortLBVIPIP | ct_new() and 
                              lb.lport == lport.id and
                              match(pkt.payload) { 
                                  EthIP4{IP4Pkt{_,_,_,_,_,_,_,proto,_,dst,l4}} ->
                                      lb.proto == proto and 
                                      lb.vip.addr == dst and 
                                      ( (lb.vip.prt == 0) or
                                        match (l4) {
                                              IPTCP{TCPPkt{_, dport, _}}    -> lb.vip.prt == dport,
                                              IPUDP{UDPPkt{_, dport, _, _}} -> lb.vip.prt == dport,
                                              _ -> false
                                        } ),
                                  _ -> false
                              } ) {
        ct_lb(lport.ct_zone, IPAddr4{lb.ip.addr}, lb.ip.prt)
    } default {
        if (ct_est() and (not ct_rel()) and (not ct_new()) and (not ct_inv())) {
            ct_lb(lport.ct_zone)
        } else if commit {
            ct_commit(lport.ct_zone)
        } 
    }
}

/* Ingress Table 10: ARP/ND responder

       This  table implements ARP/ND responder in a logical switch for known IPs. The advantage of the ARP responder flow is to limit ARP broadcasts by locally responding to ARP requests without the need to send to other hypervisors. One common case is when the inport is a logical port associated with a VIF and the broadcast is responded to on the local hypervisor rather than broadcast across the whole network and responded to by the destination VM. This behavior is proxy ARP.

    · Priority-100 flows to skip the ARP responder if inport is of type localnet or vtep and advances directly to the next table. ARP requests sent  to  localnet  or  vtep ports  can  be  received  by  multiple  hypervisors. Now, because the same mac binding rules are downloaded to all hypervisors, each of the multiple hypervisors will respond. This will confuse L2 learning on the source of the ARP requests. ARP requests received on an inport of type router are  not  expected  to  hit  any  logical switch  ARP  responder flows. However, no skip flows are installed for these packets, as there would be some additional flow cost for this and the value appears limited.

    · Priority-50 flows that match ARP requests to each known IP address A of every logical switch port, and respond with ARP replies directly with corresponding  Ethernet address E:

     eth.dst = eth.src;
     eth.src = E;
     arp.op = 2; // ARP reply. 
     arp.tha = arp.sha;
     arp.sha = E;
     arp.tpa = arp.spa;
     arp.spa = A;
     outport = inport;
     flags.loopback = 1;
     output;

     These flows are omitted for logical ports (other than router ports or localport ports) that are down.

    · Priority-50  flows  that  match  IPv6 ND neighbor solicitations to each known IP address A (and A’s solicited node address) of every logical switch port, and respond with neighbor advertisements directly with corresponding Ethernet address E:

     nd_na {
         eth.src = E;
         ip6.src = A;
         nd.target = A;
         nd.tll = E;
         outport = inport;
         flags.loopback = 1;
         output;
     };

     These flows are omitted for logical ports (other than router ports or localport ports) that are down.

    · Priority-100 flows with match criteria like the ARP and ND flows above, except that they only match packets from the inport that owns the IP addresses  in  question, with action next;. These flows prevent OVN from replying to, for example, an ARP request emitted by a VM for its own IP address. A VM only makes this kind of request to attempt to detect a duplicate IP address assignment, so sending a reply will prevent the VM from accepting the IP address that it owns.

    In place of next;, it would be reasonable to use drop; for the flows’ actions. If everything is working as it is  configured,  then  this  would  produce  equivalent results,  since no host should reply to the request. But ARPing for one’s own IP address is intended to detect situations where the network is not working as configured, so dropping the request would frustrate that intent.

    · One priority-0 fallback flow that matches all packets and advances to the next table.
*/
/* Returns true if this is an ARP request packet that has been modified to generate an ARP
   response.  The caller must send this response back to the sender.  */
procedure arp(lport : LogicalSwitchPort) : bool = {
    match (lport.ptype) {
        LPortLocalnet{_} -> false,
        _                -> {
            match (pkt.payload) {
                EthARP{ARPPkt{ARPRequest, spa, tpa, sha, tha}} -> {
                    // ignore requests for sender's own IP
                    the (lpaddr in LPortMACIP | lpaddr.lport == lport.id and lpaddr.ip == IPAddr4{tpa}) {
                        false
                    } default {
                        the (lpaddr in LPortMACIP | lpaddr.lswitch == lport.lswitch and lpaddr.ip == IPAddr4{tpa}) {
                            pkt.dst = pkt.src;
                            pkt.src = lpaddr.mac;
                            pkt.payload.arp.op = ARPReply;
                            pkt.payload.arp.tha = sha;
                            pkt.payload.arp.sha = lpaddr.mac;
                            pkt.payload.arp.spa = tpa;
                            // XXX: what does this compile to?
                            // flags.loopback = 1;
                            true
                        } default {
                            false
                        }
                    }
                },
                EthIP6{IP6Pkt{_,_,_,_,_,_,_,IPICMP6{ICMP6Pkt{_,_,ICMP6NS{ICMP6NSPkt{target, sll}}}}}} -> {
                    the (lpaddr in LPortMACIP | lpaddr.lport == lport.id and lpaddr.ip == IPAddr6{target}) {
                        false
                    } default {
                        the (lpaddr in LPortMACIP | lpaddr.lswitch == lport.lswitch and lpaddr.ip == IPAddr6{target}) {
                            pkt.dst = pkt.src;
                            pkt.src = lpaddr.mac;
                            pkt.payload.ip6.src = target;
                            pkt.payload.ip6.payload.icmp6.payload = ICMP6NA{ICMP6NAPkt{target, lpaddr.mac}};
                            // XXX: what does this compile to?
                            // flags.loopback = 1;
                            true
                        } default {
                            false
                        }
                    }
                }
            }
        }
    }
}

/* Ingress Table 11: DHCP option processing

    This table adds the DHCPv4 options to a DHCPv4 packet from the logical ports configured with IPv4 address(es) and DHCPv4 options, and similarly for DHCPv6 options.
    · A priority-100 logical flow is added for these logical ports which matches the IPv4 packet with udp.src = 68 and udp.dst = 67 and applies  the  action  put_dhcp_opts and advances the packet to the next table.
                     reg0[3] = put_dhcp_opts(offer_ip = ip, options...);
                     next;
    For  DHCPDISCOVER  and DHCPREQUEST, this transforms the packet into a DHCP reply, adds the DHCP offer IP ip and options to the packet, and stores 1 into reg0[3]. For other kinds of packets, it just stores 0 into reg0[3]. Either way, it continues to the next table.
    · A priority-100 logical flow is added for these logical ports which matches  the  IPv6  packet  with  udp.src  =  546  and  udp.dst  =  547  and  applies  the  action put_dhcpv6_opts and advances the packet to the next table.
                     reg0[3] = put_dhcpv6_opts(ia_addr = ip, options...);
                     next;
    For  DHCPv6  Solicit/Request/Confirm  packets,  this  transforms the packet into a DHCPv6 Advertise/Reply, adds the DHCPv6 offer IP ip and options to the packet, and stores 1 into reg0[3]. For other kinds of packets, it just stores 0 into reg0[3]. Either way, it continues to the next table.
    · A priority-0 flow that matches all packets to advances to table 11.

     Ingress Table 12: DHCP responses
     This table implements DHCP responder for the DHCP replies generated by the previous table.
    · A priority 100 logical flow is added for the logical ports configured with DHCPv4 options which matches IPv4 packets with udp.src == 68 && udp.dst == 67  &&  reg0[3] == 1 and responds back to the inport after applying these actions. If reg0[3] is set to 1, it means that the action put_dhcp_opts was successful.
                     eth.dst = eth.src;
                     eth.src = E;
                     ip4.dst = A;
                     ip4.src = S;
                     udp.src = 67;
                     udp.dst = 68;
                     outport = P;
                     flags.loopback = 1;
                     output;

     where  E  is  the server MAC address and S is the server IPv4 address defined in the DHCPv4 options and A is the IPv4 address defined in the logical port’s addresses column.
                     (This terminates ingress packet processing; the packet does not go to the next ingress table.)
*/

#controller
procedure dhcp4(lport : lport_id_t) : sink = {
    the (dhcp_addr_opts in LPortDHCP4AddrOpts | dhcp_addr_opts.lport == lport) {
        pkt.dst = pkt.src;
        pkt.src = dhcp_addr_opts.options.server_mac;
        pkt.payload.ip4.dst = dhcp_addr_opts.ip;
        pkt.payload.ip4.src = dhcp_addr_opts.options.server_id;
        pkt.payload.ip4.payload.udp.src = 67;
        pkt.payload.ip4.payload.udp.dst = 68;
        pkt.payload.ip4.payload.udp.payload = UDPDHCP4{DHCP4Pkt{ 2, 1, 6, pkt.payload.ip4.payload.udp.payload.dhcp4.xid, 0, 
                                                                 pkt.payload.ip4.payload.udp.payload.dhcp4.flags,
                                                                 0, dhcp_addr_opts.ip, dhcp_addr_opts.options.server_id, 0, 
                                                                 pkt.dst ++ 80'h0, dhcp_addr_opts.options} };
        ctlBounce(lport)
    } default { drop }
}

#controller
procedure dhcp6(lport : lport_id_t) : sink = {
    the (dhcp_addr_opts in LPortDHCP6AddrOpts | dhcp_addr_opts.lport == lport) {
        pkt.dst = pkt.src;
        pkt.src = dhcp_addr_opts.options.server_id.mac;
        pkt.payload.ip6.dst = dhcp_addr_opts.ip;
        pkt.payload.ip6.src = dhcp_addr_opts.server_ip;
        pkt.payload.ip4.payload.udp.src = 547;
        pkt.payload.ip4.payload.udp.dst = 546;
        if ( (pkt.payload.ip4.payload.udp.payload.dhcp6.op == 1/*SOLICIT*/) or 
             (pkt.payload.ip4.payload.udp.payload.dhcp6.op == 3/*REQUEST*/) or 
             (pkt.payload.ip4.payload.udp.payload.dhcp6.op == 4/*CONFIRM*/) or 
             (pkt.payload.ip4.payload.udp.payload.dhcp6.op == 5/*RENEW*/) ) {
            pkt.payload.ip4.payload.udp.payload = UDPDHCP6{DHCP6Pkt{7/*REPLY*/, dhcp_addr_opts.options} };
            ctlBounce(lport)
        } else { drop }
    } default { drop }
}

#controller
procedure dns(lport : lport_id_t) : sink = {
    // TODO: call DNS lookup builting
    drop
}


// bounce the  packet back to the port is arrived from after local ARP or DHCP processing
procedure bounce(vport: VSwitchPort, lport : LogicalSwitchPort): sink = {
    match (lport.ptype) {
        LPortVIF { par, _, tag } -> pkt.vlan = VLAN{0, tag},
        _                        -> ()
    };
    send PVSwitchPort[vport].out
}


procedure ctlBounce(lport : lport_id_t): sink = {
    the (lp in LogicalSwitchPort | lp.id == lport) {
        var vp: VSwitchPort;
        vp = match (lp.ptype) {
                LPortVIF{p,_,_} -> the (v in VSwitchPort | vp.lport == p)     { v },
                _               -> the (v in VSwitchPort | vp.lport == lport) { v }
        };
        bounce(vp, lp)
    } default { drop }
}

/* Ingress Table 15 Destination Lookup
    This table implements switching behavior. It contains these logical flows:
    · A  priority-100  flow  that  outputs all packets with an Ethernet broadcast or multicast eth.dst to the MC_FLOOD multicast group, which ovn-northd populates with all enabled logical ports.
    · One priority-50 flow that matches each known Ethernet address against eth.dst and outputs the packet to the single associated output port.
    For the Ethernet address on a logical switch port of type router, when that logical switch port’s addresses column is set to router and the connected logical  router port specifies a redirect-chassis:
        · The flow for the connected logical router port’s Ethernet address is only programmed on the redirect-chassis.  
        · If  the  logical  router  has  rules specified in nat with external_mac, then those addresses are also used to populate the switch’s destination lookup on the chassis where logical_port is resident.
    · One priority-0 fallback flow that matches all packets and outputs them to the MC_UNKNOWN multicast group, which ovn-northd populates with all enabled  logical  ports that  accept  unknown destination packets. As a small optimization, if no logical ports accept unknown destination packets, ovn-northd omits this multicast group and logical flow.
*/
// TODO: optimize tail calls to sendToChassis
procedure dstLookup(vport : VSwitchPort, lport : LogicalSwitchPort): sink = {
    /* Compute chassis to forward the packet to */
    var dst : chassis_id_t;
    if (ethMulticastAddr(pkt.dst)) {
        /* fork to all chassis that host this switch */
        fork (chassis in LSwitchAtChassis | chassis.sender == vport.switch and chassis.lswitch == lport.lswitch) {
            dst = chassis.chassis
        }
    } else {
        /* find matching chassis */
        the (chassis in MACChassis | chassis.lswitch == lport.lswitch and chassis.mac == pkt.dst) {
            dst = match (chassis.chassis) {
                      DSTLocal      -> vport.switch,
                      DSTChassis{c} -> c
                  }
        } default {
            /* destination unknown: send to all chassis that host ports with unknown addresses */
            fork (chassis in UnknownMACChassis | chassis.sender == vport.switch and chassis.lswitch == lport.lswitch) {
                dst = chassis.chassis
            }
        }
    };
    sendToChassis(vport, lport, dst)
}

// Send packet to specified chassis.  
procedure sendToChassis(vport : VSwitchPort, lport : LogicalSwitchPort, dst : chassis_id_t): sink = {
    if (dst == vport.switch) {
        vSwitchEgress(true, dst, lport.lswitch)
    } else {
        the (dtun in TunnelPort | dtun.switch == dst) {
            pkt.vxlan.tun_dst = dtun.externalip;
            pkt.vxlan.tun_id  = lport.lswitch;
            the (stun in TunnelPort | stun.switch == vport.switch) {
                send PTunnelPort[stun].out
            }
        }
    }
}

/* Packet arrives to VSwitch ready for logical switch port egress 
   processing.  Establish port(s) it belongs to and call lportEgress.
   The first argument is true iff the packet originated at the local 
   switch. */
procedure vSwitchEgress(local : bool, chassis: chassis_id_t, lswitch : lswitch_id_t) : sink = {
    /* multicast? - deliver to all local ports on this switch */
    var lport : lport_id_t;
    if (ethMulticastAddr(pkt.dst)) {
        fork(lp in LPortAtChassis | lp.lswitch == lswitch and lp.chassis == chassis and (lp.float => local)) {
            lport = lp.lport
        }
    } else {
        /* unicast - deliver to port that owns the address, or to all ports with unknown addresses */
        the (lp in LPortMACChassis | lp.lswitch == lswitch and 
                                     lp.chassis == chassis and 
                                     lp.mac == pkt.dst and 
                                     (lp.float => local)) {
            lport = lp.lport
        } default {
            /* destination unknown: send to all chassis that host ports with unknown addresses */
            fork (lp in LPortUnknownMACChassis | lp.lswitch == lswitch and 
                                                 lp.chassis == chassis and 
                                                 (lp.float => local)) {
                lport = lp.lport
            }
        }
    };
    the (lp in LogicalSwitchPort | lp.id == lport) {
        lportEgress(lp, chassis)
    }
}

procedure lportEgress(lport: LogicalSwitchPort, chassis : chassis_id_t): sink = {
    /* Run through connection tracker if needed */
    egressConnTrack(lport);

    /* XXX: I don't understand how LB works on egress */
    var lbcommit = egressLB(lport);

    /* acl */
    (var allowed, var aclcommit) = acl(lport, ACLTo);
    if (not allowed) {
        drop
    } else if (lbcommit) {
        ct_lb(lport.ct_zone)
    } else if (aclcommit) {
        ct_commit(lport.ct_zone)
    };

    if (not egressPortSecurity(lport, pkt)) drop;

    deliver(lport, chassis)
}

procedure deliver(lport : LogicalSwitchPort, chassis : chassis_id_t): sink = {
    match (lport.ptype) {
        LPortRouter{_}   -> drop, // XXX: TODO
        _ -> ()
    };

    match (lport.ptype) {
        LPortVIF{p,_,t}         -> {
            pkt.vlan.vid = t;
            the (vport in VSwitchPort | vport.lport == p and vport.switch == chassis) { 
                send PVSwitchPort[vport].out 
            }
        },
        _                       -> {
            the (vport in VSwitchPort | vport.lport == lport.id and vport.switch == chassis) { 
                send PVSwitchPort[vport].out 
            }
        }
    }
}

procedure egressConnTrack(lport : LogicalSwitchPort): () = {
    var needCT = false;
    the (lp in LPortStatefulACL | lp.lport == lport.id) {
        needCT = true
    } default { () };

    the (lp in LPortLB | lp.lport == lport.id) {
        needCT = true
    } default { () };

    // sends the packet to connection tracker
    ct(lport.ct_zone)
}

procedure egressLB(lport : LogicalSwitchPort) : bool = {
    ct_est() and (not ct_rel()) and (not ct_new()) and (not ct_inv())
}

/*  
    Egress Table 7: Egress Port Security - IP
    This is similar to the port security logic in table Ingress Port Security - IP except that outport, eth.dst, ip4.dst and ip6.dst are checked instead of  inport,  eth.src,  ip4.src and ip6.src

    Egress Table 8: Egress Port Security - L2

    This  is  similar to the ingress port security logic in ingress table Admission Control and Ingress Port Security - L2, but with important differences. Most obviously, outport and eth.dst are checked instead of inport and eth.src. Second, packets directed to broadcast or multicast eth.dst are always accepted instead of being subject  to  the  port  security rules;  this  is implemented through a priority-100 flow that matches on eth.mcast with action output;. Finally, to ensure that even broadcast and multicast packets are not delivered to disabled logical ports, a priority-150 flow for each disabled logical outport overrides the priority-100 flow with a drop; action.
*/
function egressPortSecurity(lport: LogicalSwitchPort, p: Packet): bool = {
    if (not lport.enabled) {
        false
    } else if (ethMulticastAddr(p.dst)) {
        true 
    } else { 
        the (psec in PortSecurityType | psec.lport == lport.id) {
            if (psec.stype == PortSecNone) { true }
            else {
                the (psecmac in PortSecurityMAC | psecmac.lport == lport.id and psecmac.mac == p.dst) {
                    match (psec.stype) {
                        PortSecIP -> egressPortSecIP(lport, p),
                        _         -> true
                    }
                } default { false }
            }
        }
    }
}

function egressPortSecIP(lport: LogicalSwitchPort, p: Packet): bool = {
    if (isPktDHCPDiscovery(p) or isPktDAD(p)) {
        true
    } else {
        the (psecip in PortSecurityIP | psecip.lport == lport.id and psecip.mac == p.dst and ipDstMatch(p.payload, psecip.subnet)) {
            true
        } default { false }
    }
}

function ipDstMatch(p: eth_payload_t, subnet: ip_subnet_t): bool = {
    match ((p, subnet)) {
        (EthIP4{ip4}, IPSubnet4{subnet4}) -> ip4Match(ip4.dst, subnet4),
        (EthIP6{ip6}, IPSubnet6{subnet6}) -> ip6Match(ip6.dst, subnet6),
        _                                 -> false
    }
}

procedure tunIngress(port: TunnelPort): sink = {
    vSwitchEgress(false, port.switch, pkt.vxlan.tun_id)
}
