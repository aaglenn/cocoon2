// Logical ports that correspond to VIF connections
// view VIFPort( id : lport_id_t )
// VIFPort(id) :- LogicalSwitchPort(id,_,LPortVIF{_,_,_},_,_,_,_,_,_)

/* Port security */
typedef port_sec_type_t = PortSecNone
                        | PortSecMAC
                        | PortSecIP

view PortSecurityEnabled( lport : lport_id_t )
PortSecurityEnabled(lport) :- PortSecurityMAC(lport, _)

view PortIPSecurityEnabled( lport : lport_id_t )
PortIPSecurityEnabled(lport) :- PortSecurityMAC(lport, mac), PortSecurityIP(lport, mac, _)

view PortSecurityType ( lport : lport_id_t
                      , stype : port_sec_type_t)

PortSecurityType(lport, PortSecNone) :- LogicalSwitchPort(lport, _, _, _, _, _, _, _), not PortSecurityEnabled(lport)
PortSecurityType(lport, PortSecMAC) :- PortSecurityEnabled(lport), not PortIPSecurityEnabled(lport)
PortSecurityType(lport, PortSecIP) :- PortIPSecurityEnabled(lport)

view PortSecurityIP4Match( lport  : lport_id_t
                         , mac    : mac_addr_t
                         , subnet : ip4_subnet_t )

PortSecurityIP4Match(lport, mac, IP4Subnet{0,0}) :- PortSecurityMAC(lport, mac), not PortIPSecurityEnabled(lport)
PortSecurityIP4Match(lport, mac, subnet)         :- PortSecurityMAC(lport, mac), PortSecurityIP(lport, mac, IPSubnet4{subnet})

view PortSecurityIP6Match( lport  : lport_id_t
                         , mac    : mac_addr_t
                         , subnet : ip6_subnet_t )

PortSecurityIP6Match(lport, mac, IP6Subnet{0,0}) :- PortSecurityMAC(lport, mac), not PortIPSecurityEnabled(lport)
PortSecurityIP6Match(lport, mac, subnet)         :- PortSecurityMAC(lport, mac), PortSecurityIP(lport, mac, IPSubnet6{subnet})

/* ACLs */
view LPortStatefulACL(lport : lport_id_t)

LPortStatefulACL(lport) :- LogicalSwitchPort(lport, lswitch, _, _, _, _, _, _), ACL(lswitch, _, _, _, ACLAllowRelated)
LPortStatefulACL(lport) :- LogicalSwitchPort(lport, lswitch, _, _, _, _, _, _), ACL(lswitch, _, _, _, ACLAllow)

/* Load balancing */
view LPortLBVIP( lport : lport_id_t
               , vip   : ip4_addr_port_t)

LPortLBVIP(lport, vip) :- LogicalSwitchPort(lport, lswitch, _, _, _, _, _, _), LBSwitch(lb, lswitch), LBVIP(lb, vip)

view LPortLBVIPIP( lport : lport_id_t
                 , proto : ip_proto_t
                 , vip   : ip4_addr_port_t
                 , ip    : ip4_addr_port_t)

LPortLBVIPIP(lport, proto, vip, ip) :- LogicalSwitchPort(lport, lswitch, _, _, _, _, _, _), 
                                       LoadBalancer(lb,_,proto),
                                       LBSwitch(lb, lswitch),
                                       LBIP(lb, vip, ip)


/* Logical switch port addressing */
view LPortMACIP ( lswitch : lswitch_id_t
                , lport   : lport_id_t
                , mac     : mac_addr_t
                , ip      : ip_addr_t)

LPortMACIP(lswitch, lport, mac, ip) :- LogicalSwitchPort(lport, lswitch, _, _, en, _, _, _), en == true, LogicalSwitchPortIP(lport, mac, ip)
LPortMACIP(lswitch, lport, mac, ip) :- LogicalSwitchPort(lport, lswitch, _, _, en, _, _, _), en == true, LogicalSwitchPortDynAddr(_, lport, mac, ip)

/* DHCP */
view LPortDHCP4AddrOpts ( lport   : lport_id_t
                        , mac     : mac_addr_t
                        , ip      : ip4_addr_t
                        , options : dhcp4_options_t)

LPortDHCP4AddrOpts(lport, mac, ip, options) :- LPortMACIP(_, lport, mac, IPAddr4{ip}), 
                                               LogicalSwitchPort(lport,_ , _, _, en, SomeDHCP4Options{optid}, _, _), 
                                               DHCPv4Options(optid, options)

view LPortDHCP6AddrOpts ( lport     : lport_id_t
                        , mac       : mac_addr_t
                        , ip        : ip6_addr_t
                        , server_ip : ip6_addr_t
                        , options   : dhcp6_options_t)

LPortDHCP6AddrOpts(lport, mac, ip, server_ip, options) :- LPortMACIP(_, lport, mac, IPAddr6{ip}), 
                                                          LogicalSwitchPort(lport, _, _, _, en, _, SomeDHCP6Options{optid}, _), 
                                                          DHCPv6Options(optid, server_ip, options)


/* Logical switch/port to chassis mapping */

// Switch has presence at chassis (through VM or L2Gateway port)
view LSwitchAtChassis( lswitch : lswitch_id_t
                     , chassis : chassis_id_t)

LSwitchAtChassis(lswitch, chassis) :- LogicalSwitchPort(_, lswitch, LPortVM{chassis}, _, en, _, _, _), en
LSwitchAtChassis(lswitch, chassis) :- LogicalSwitchPort(_, lswitch, LPortL2Gateway{_, chassis}, _, en, _, _, _), en

typedef destination_t = DSTChassis {chassis : chassis_id_t}
                      | DSTLocal

view MACChassis ( lswitch : lswitch_id_t  
                , mac     : mac_addr_t
                , chassis : destination_t)

MACChassis(lswitch, mac, DSTChassis{chassis}) :- LogicalSwitchPort(lport, lswitch, LPortVM{chassis}, _, en, _, _, _), en,
                                                 LogicalSwitchPortMAC(lport, mac)

MACChassis(lswitch, mac, DSTChassis{chassis}) :- LogicalSwitchPort(lport, lswitch, LPortVIF{p, _, _}, _, en, _, _, _), en,
                                                 LogicalSwitchPort(p, _, LPortVM{chassis}, _, _, _, _, _), 
                                                 LogicalSwitchPortMAC(lport, mac)

MACChassis(lswitch, mac, DSTChassis{chassis}) :- LogicalSwitchPort(lport, lswitch, LPortL2Gateway{_, chassis}, _, en, _, _, _), en,
                                                 LogicalSwitchPortMAC(lport, mac)

MACChassis(lswitch, mac, DSTLocal) :- LogicalSwitchPort(lport, lswitch, LPortLocalnet{_}, _, en, _, _, _), en,
                                      LogicalSwitchPortMAC(lport, mac)

MACChassis(lswitch, mac, DSTLocal) :- LogicalSwitchPort(lport, lswitch, LPortRouter{_}, _, en, _, _, _), en,
                                      LogicalSwitchPortMAC(lport, mac)

view UnknownMACChassis ( lswitch : lswitch_id_t  
                       , chassis : destination_t)

UnknownMACChassis(lswitch, DSTChassis{chassis}) :- LogicalSwitchPort(lport, lswitch, LPortVM{chassis}, _, en, _, _, u), en, u
UnknownMACChassis(lswitch, DSTChassis{chassis}) :- LogicalSwitchPort(lport, lswitch, LPortVIF{p, _, _}, _, en, _, _, u), en, u,
                                                   LogicalSwitchPort(p, _, LPortVM{chassis}, _, _, _, _, _)
UnknownMACChassis(lswitch, DSTChassis{chassis}) :- LogicalSwitchPort(lport, lswitch, LPortL2Gateway{_, chassis}, _, en, _, _, u), en, u
UnknownMACChassis(lswitch, DSTLocal) :- LogicalSwitchPort(lport, lswitch, LPortLocalnet{_}, _, en, _, _, u), en, u
UnknownMACChassis(lswitch, DSTLocal) :- LogicalSwitchPort(lport, lswitch, LPortRouter{_}, _, en, _, _, u), en, u


