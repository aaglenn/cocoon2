// Logical ports that correspond to VIF connections
// view VIFPort( id : lport_id_t )
// VIFPort(id) :- LogicalSwitchPort(id,_,LPortVIF{_,_,_},_,_,_,_,_,_)


/* Trunk port */

view TrunkPort(lport : lport_id_t)

TrunkPort(lport) :- LogicalSwitchPort(lport, _, _, _, _, _, _, _, _),
                    LogicalSwitchPort(_, _, LPortVIF{lport, _, _}, _, _, _, _, _, _)

/* Port security */
typedef port_sec_type_t = PortSecNone
                        | PortSecMAC
                        | PortSecIP

view PortSecurityEnabled( lport : lport_id_t )
PortSecurityEnabled(lport) :- PortSecurityMAC(lport, _)

view PortIPSecurityEnabled( lport : lport_id_t )
PortIPSecurityEnabled(lport) :- PortSecurityMAC(lport, mac), PortSecurityIP(lport, mac, _)

view PortSecurityType ( lport : lport_id_t
                      , stype : port_sec_type_t)

PortSecurityType(lport, PortSecNone) :- LogicalSwitchPort(lport, _, _, _, _, _, _, _, _), not PortSecurityEnabled(lport)
PortSecurityType(lport, PortSecMAC) :- PortSecurityEnabled(lport), not PortIPSecurityEnabled(lport)
PortSecurityType(lport, PortSecIP) :- PortIPSecurityEnabled(lport)

view PortSecurityIP4Match( lport  : lport_id_t
                         , mac    : mac_addr_t
                         , subnet : ip4_subnet_t )

PortSecurityIP4Match(lport, mac, IP4Subnet{0,0}) :- PortSecurityMAC(lport, mac), not PortIPSecurityEnabled(lport)
PortSecurityIP4Match(lport, mac, subnet)         :- PortSecurityMAC(lport, mac), PortSecurityIP(lport, mac, IPSubnet4{subnet})

view PortSecurityIP6Match( lport  : lport_id_t
                         , mac    : mac_addr_t
                         , subnet : ip6_subnet_t )

PortSecurityIP6Match(lport, mac, IP6Subnet{0,0}) :- PortSecurityMAC(lport, mac), not PortIPSecurityEnabled(lport)
PortSecurityIP6Match(lport, mac, subnet)         :- PortSecurityMAC(lport, mac), PortSecurityIP(lport, mac, IPSubnet6{subnet})

/* ACLs */
view LPortStatefulACL(lport : lport_id_t)

LPortStatefulACL(lport) :- LogicalSwitchPort(lport, lswitch, _, _, _, _, _, _, _), ACL(lswitch, _, _, _, ACLAllowRelated)
LPortStatefulACL(lport) :- LogicalSwitchPort(lport, lswitch, _, _, _, _, _, _, _), ACL(lswitch, _, _, _, ACLAllow)

/* Load balancing */
view LPortLBVIP( lport : lport_id_t
               , vip   : ip4_addr_port_t)

LPortLBVIP(lport, vip) :- LogicalSwitchPort(lport, lswitch, _, _, _, _, _, _, _), LBSwitch(lb, lswitch), LBVIP(lb, vip)

view LPortLBVIPIP( lport : lport_id_t
                 , proto : ip_proto_t
                 , vip   : ip4_addr_port_t
                 , ip    : ip4_addr_port_t)

LPortLBVIPIP(lport, proto, vip, ip) :- LogicalSwitchPort(lport, lswitch, _, _, _, _, _, _, _), 
                                       LoadBalancer(lb,_,proto),
                                       LBSwitch(lb, lswitch),
                                       LBIP(lb, vip, ip)

view LPortLB( lport : lport_id_t )

LPortLB(lport) :- LPortLBVIP(lport, _)

/* Logical switch port addressing */
view LPortMACIP ( lswitch : lswitch_id_t
                , lport   : lport_id_t
                , mac     : mac_addr_t
                , ip      : ip_addr_t)

LPortMACIP(lswitch, lport, mac, ip) :- LogicalSwitchPort(lport, lswitch, _, _, en, _, _, _, _), en, 
                                       LogicalSwitchPortIP(lport, mac, ip)
LPortMACIP(lswitch, lport, mac, ip) :- LogicalSwitchPort(lport, lswitch, _, _, en, _, _, _, _), en, 
                                       LogicalSwitchPortDynAddr(_, lport, mac, SomeIPAddr{ip})

/* DHCP */
view LPortDHCP4AddrOpts ( lport   : lport_id_t
                        , mac     : mac_addr_t
                        , ip      : ip4_addr_t
                        , options : dhcp4_options_t)

LPortDHCP4AddrOpts(lport, mac, ip, options) :- LPortMACIP(_, lport, mac, IPAddr4{ip}), 
                                               LogicalSwitchPort(lport,_ , _, _, en, SomeDHCP4Options{optid}, _, _, _), 
                                               DHCPv4Options(optid, options)

view LPortDHCP6AddrOpts ( lport     : lport_id_t
                        , mac       : mac_addr_t
                        , ip        : ip6_addr_t
                        , server_ip : ip6_addr_t
                        , options   : dhcp6_options_t)

LPortDHCP6AddrOpts(lport, mac, ip, server_ip, options) :- LPortMACIP(_, lport, mac, IPAddr6{ip}), 
                                                          LogicalSwitchPort(lport, _, _, _, en, _, SomeDHCP6Options{optid}, _, _), 
                                                          DHCPv6Options(optid, server_ip, options)


/* Logical switch/port to chassis mapping */

// Logical ports present at chassis (localnet and router ports are present at all chassis)
view LPortAtChassis( lport   : lport_id_t
                   , lswitch : lswitch_id_t
                   , chassis : chassis_id_t
                   , float   : bool)

LPortAtChassis(lport, lswitch, chassis, false) :- 
    LogicalSwitchPort(lport, lswitch, LPortVM{}, _, en, _, _, _, _), en,
    not TrunkPort(lport),
    LPortBinding(lport, vport),
    VSwitchPort(vport, _, chassis, _)

LPortAtChassis(lport, lswitch, chassis, false) :- 
    LogicalSwitchPort(lport, lswitch, LPortL2Gateway{_, chassis}, _, en, _, _, _, _), en

LPortAtChassis(lport, lswitch, chassis, true)  :- 
    Chassis(chassis, f, _, _), f==false,
    LogicalSwitchPort(lport, lswitch, LPortLocalnet{pnet}, _, en, _, _, _, _), en

LPortAtChassis(lport, lswitch, chassis, true)  :- 
    Chassis(chassis, f, _, _), f==false,
    LogicalSwitchPort(lport, lswitch, LPortRouter{_}, _, en, _, _, _, _), en

LPortAtChassis(lport, lswitch, chassis, false)  :- 
    LogicalSwitchPort(lport, lswitch, LPortVIF{p, r, t}, _, en, _, _, _, _), en,
    LogicalSwitchPort(p, _, LPortVM{}, _, _, _, _, _, _),
    LPortBinding(p, vport),
    VSwitchPort(vport, _, chassis, _)

// logical ports with known mac addresses at chassis (localnet and router ports are present at all chassis)
view LPortMACChassis ( lswitch : lswitch_id_t
                     , lport   : lport_id_t
                     , mac     : mac_addr_t
                     , chassis : chassis_id_t
                     , float   : bool)

LPortMACChassis(lswitch, lport, mac, chassis, false) :- 
    LogicalSwitchPort(lport, lswitch, LPortVM{}, _, en, _, _, _, _), en,
    LogicalSwitchPortMAC(lport, mac),
    LPortBinding(lport, vport),
    VSwitchPort(vport, _, chassis, _)

LPortMACChassis(lswitch, lport, mac, chassis, false) :- 
    LogicalSwitchPort(lport, lswitch, LPortVIF{p, r, t}, _, en, _, _, _, _), en,
    LogicalSwitchPort(p, _, LPortVM{}, _, _, _, _, _, _), 
    LogicalSwitchPortMAC(lport, mac),
    LPortBinding(p, vport),
    VSwitchPort(vport, _, chassis, _)

LPortMACChassis(lswitch, lport, mac, chassis, false) :- 
    LogicalSwitchPort(lport, lswitch, LPortL2Gateway{pnet, chassis}, _, en, _, _, _, _), en,
    LogicalSwitchPortMAC(lport, mac)

LPortMACChassis(lswitch, lport, mac, chassis, true) :- 
    Chassis(chassis, f, _, _), f==false,
    LogicalSwitchPort(lport, lswitch, LPortLocalnet{pnet}, _, en, _, _, _, _), en,
    LogicalSwitchPortMAC(lport, mac)

LPortMACChassis(lswitch, lport, mac, chassis, true) :- 
    Chassis(chassis, f, _, _), f==false,
    LogicalSwitchPort(lport, lswitch, LPortRouter{r}, _, en, _, _, _, _), en,
    LogicalSwitchPortMAC(lport, mac)

// logical ports with unknown mac addresses at chassis (localnet and router ports are present at all chassis)
view LPortUnknownMACChassis ( lswitch : lswitch_id_t  
                            , lport   : lport_id_t 
                            , chassis : chassis_id_t
                            , float   : bool)

LPortUnknownMACChassis(lswitch, lport, chassis, false) :- 
    LogicalSwitchPort(lport, lswitch, LPortVM{}, _, en, _, _, u, _), en, u,
    not TrunkPort(lport),
    LPortBinding(lport, vport),
    VSwitchPort(vport, _, chassis, _)

LPortUnknownMACChassis(lswitch, lport, chassis, false) :- 
    LogicalSwitchPort(lport, lswitch, LPortVIF{p, r, t}, _, en, _, _, u, _), en, u,
    LogicalSwitchPort(p, _, LPortVM{}, _, _, _, _, _, _),
    LPortBinding(lport, vport),
    VSwitchPort(vport, _, chassis, _)

LPortUnknownMACChassis(lport, lswitch, chassis, false) :- 
    LogicalSwitchPort(lport, lswitch, LPortL2Gateway{pnet, chassis}, _, en, _, _, u, _), en, u

LPortUnknownMACChassis(lport, lswitch, sender, true)  :- 
    Chassis(sender, f, _, _), f==false,
    LogicalSwitchPort(lport, lswitch, LPortLocalnet{pnet}, _, en, _, _, u, _), en, u

LPortUnknownMACChassis(lport, lswitch, sender, true)  :- 
    Chassis(sender, f, _, _), f==false,
    LogicalSwitchPort(lport, lswitch, LPortRouter{r}, _, en, _, _, u, _), en, u

typedef destination_t = DSTChassis {chassis : chassis_id_t}
                      | DSTLocal

// Switch has presence at chassis (through VM or L2Gateway port)
view LSwitchAtChassis( sender  : chassis_id_t
                     , lswitch : lswitch_id_t
                     , chassis : destination_t)

LSwitchAtChassis(sender, lswitch, DSTLocal) :- Chassis(sender, f, _, _), f==false, 
                                               LPortAtChassis(_, lswitch, sender, _)

LSwitchAtChassis(sender, lswitch, DSTChassis{chassis}) :- Chassis(sender, f, _, _), f==false, 
                                                          LPortAtChassis(_, lswitch, chassis, fl), ((not fl) and (chassis != sender))

// Switch has known MAC address at chassis
view MACChassis ( lswitch : lswitch_id_t  
                , mac     : mac_addr_t
                , chassis : destination_t)

MACChassis(lswitch, mac, DSTChassis{chassis}) :- LPortMACChassis(lswitch, _, mac, chassis, f), not f
MACChassis(lswitch, mac, DSTLocal)            :- LPortMACChassis(lswitch, _, mac, _, f), f

// Switch has unknown MAC address at chassis
view UnknownMACChassis ( sender  : chassis_id_t
                       , lswitch : lswitch_id_t  
                       , chassis : destination_t)

UnknownMACChassis(sender, lswitch, DSTLocal) :-
    Chassis(sender, f, _, _), f==false, 
    LPortUnknownMACChassis(lswitch, _, sender, _)

UnknownMACChassis(sender, lswitch, DSTChassis{chassis}) :-
    Chassis(sender, f, _, _), f==false, 
    LPortUnknownMACChassis(lswitch, _, chassis, fl), ((not fl) and (chassis != sender))

// Tunnels between pairs of distinct chassis
view TunnelFromTo( fromChassis: chassis_id_t
                 , toChassis  : chassis_id_t
                 , toip       : ip4_addr_t )

TunnelFromTo(from, to, toip) :- TunnelPort(_, _, to, toip), Chassis(from, _, _, _), from != to

/* Routers */

view LRouterNetwork ( lrouter : lrouter_id_t
                    , network : ip_subnet_t)

LRouterNetwork(lrouter, network) :- LogicalRouterPort(lrport, _, lrouter, _, _ ,_ , _, _), 
                                    LRouterPortNetwork(lrport, network)

view LRouterLBVIP ( lrouter : lrouter_id_t
                  , vip     : ip4_addr_t)

LRouterLBVIP(lrouter, vip) :- LBRouter(lb, lrouter), LBVIP(lb, IP4AddrPort{vip, _})

/* NAT */

// for NAT rules bound to a chassis
view NATChassis ( lrouter      : lrouter_id_t
                , ntype        : nat_type_t
                , external_ip  : ip4_addr_t
                , external_mac : opt_mac_addr_t
                , logical_ip   : ip4_subnet_t
                , logical_port : lport_id_t
                , chassis      : chassis_id_t)

NATChassis(lrouter, ntype, external_ip, SomeMACAddr{external_mac}, logical_ip, logical_port, chassis) :-
    NAT(lrouter, ntype, external_ip, SomeMACAddr{external_mac}, logical_ip, SomeLPortId{logical_port}),
    LPortAtChassis(logical_port, _, chassis, f), not f

NATChassis(lrouter, ntype, external_ip, NoMACAddr, logical_ip, 0, chassis) :-
    NAT(lrouter, ntype, external_ip, NoMACAddr, logical_ip, SomeLPortId{logical_port}),
    LogicalRouterPort(_, _, lrouter, LRPGateway{chassis}, _, e, _, _), e

/* Routes */
view Route ( lrouter     : lrouter_id_t
           , ip_prefix   : ip_subnet_t
           , nexthop     : ip_addr_t
           , outport     : lrouter_port_id_t
           , outportmac  : mac_addr_t
           , outportip   : ip_addr_t)

Route(lrouter, ip_prefix, nexthop, outport, outportmac, IPAddr4{outportip}) :- 
    LogicalRouterStaticRoute (lrouter, ip_prefix, nexthop, outport),
    LogicalRouterPort(outport, _, _, _, outportmac, _, _, _),
    LRouterPortNetwork(outport, IPSubnet4{IP4Subnet{outportip, _}})

Route(lrouter, ip_prefix, nexthop, outport, outportmac, IPAddr6{outportip}) :- 
    LogicalRouterStaticRoute (lrouter, ip_prefix, nexthop, outport),
    LogicalRouterPort(outport, _, _, _, outportmac, _, _, _),
    LRouterPortNetwork(outport, IPSubnet6{IP6Subnet{outportip, _}})
