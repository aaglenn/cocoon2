// logical switch id
typedef lswitch_id_t = bit<64>

// logical port id
typedef lport_id_t = bit<64>

typedef ip4_subnet_t = IP4Subnet { addr : ip4_addr_t
                                 , mask : ip4_addr_t }

typedef ip6_subnet_t = IP6Subnet { addr : ip6_addr_t
                                 , mask : ip6_addr_t }

typedef ip_subnet_t = IPSubnet4 {ip4_subnet : ip4_subnet_t}
                    | IPSubnet6 {ip6_subnet : ip6_subnet_t}

typedef opt_subnet_t = SomeSubnet { subnet : ip_subnet_t }
                     | NoSubnet

typedef lswitch_type_t = LSwitchRegular
                       | LSwitchBridged

/* Logical switch port type
      (empty string)
             A VM (or VIF) interface.
      router A connection to a logical router.
      localnet
             A connection to a locally accessible network from each ovn-controller instance.  A  logical  switch  can  only  have  a  single  localnet  port
             attached.  This is used to model direct connectivity to an existing network.
      l2gateway
             A connection to a physical network.
      vtep   A port to a logical switch on a VTEP gateway.

     Options for router ports:
       router-port: optional string
              Required.  The name of the Logical_Router_Port to which this logical switch port is connected.
       nat-addresses: optional string
              MAC  address  of the router-port followed by a list of SNAT and DNAT IP addresses. This is used to send gratuitous ARPs for SNAT and DNAT IP addresses
              via localnet and is valid for only L3 gateway ports.  Example: 80:fa:5b:06:72:b7 158.36.44.22 158.36.44.24. This would result in generation of  gratu‐
              itous ARPs for IP addresses 158.36.44.22 and 158.36.44.24 with a MAC address of 80:fa:5b:06:72:b7.

     Options for localnet ports:
       network_name: optional string
              Required.   The  name  of  the  network to which the localnet port is connected.  Each hypervisor, via ovn-controller, uses its local configuration to
              determine exactly how to connect to this locally accessible network.

     Options for l2gateway ports:
       network_name: optional string
              Required.  The name of the network to which the l2gateway port is connected.  The L2 gateway, via ovn-controller,  uses  its  local  configuration  to
              determine exactly how to connect to this network.
       l2gateway-chassis: optional string
              Required.  The chassis on which the l2gateway logical port should be bound to. ovn-controller running on the defined chassis will connect this logical
              port to the physical network.
 */
typedef lport_type_t = LPortVM
                     | LPortVIF { parent      : lport_id_t
                                , tag_request : vlan_id_t
                                , tag         : vlan_id_t }
                     // XXX: do we need to store MAC and IP addresses here or can they be extracted from router port table
                     // XXX: are promiscous ARP sent from all chassis with localnet connection?
                     | LPortRouter { rport : lrouter_port_id_t }
                     | LPortLocalnet { localnet : pnet_id_t }
                     | LPortL2Gateway { pnet    : pnet_id_t
                                      , chassis : chassis_id_t }
                     // | LPortVTEP

/* LogicalSwitch table 
   Each row represents one L2 logical switch.
 
   There  are two kinds of logical switches, that is, ones that fully virtualize the network (overlay logical switches) and ones that
   provide simple connectivity to a physical network (bridged logical switches).  They work in the same way when providing connectiv‐
   ity  between logical ports on same chasis, but differently when connecting remote logical ports.  Overlay logical switches connect
   remote logical ports by tunnels, while bridged logical switches provide connectivity to remote ports by bridging  the  packets  to
   directly connected physical L2 segment with the help of localnet ports.  Each bridged logical switch has one and only one localnet
   port, which has only one special address unknown.
 
   Details:
       name: string
              A name for the logical switch.  This name has no special meaning or purpose other than to  provide  convenience  for  human
              interaction with the ovn-nb database.  There is no requirement for the name to be unique.
       subnet: optional string
              Set this to an IPv4 subnet, e.g. 192.168.0.0/24, to enable ovn-northd to automatically assign IP addresses within that sub‐
              net.  Use the dynamic keyword in the Logical_Switch_Port table’s addresses column to request dynamic address assignment for
              a particular port.
*/

table LogicalSwitch( id     : lswitch_id_t
                   , type   : lswitch_type_t
                   , name   : string
                   , subnet : opt_subnet_t
                   , primary key (id))

/* Logical switch port addressing
   addresses: set of strings
          Addresses owned by the logical port.  Each element in the set must take one of the following forms:
          XXX: is "unknown" mutually exclusive with other address types?

          Ethernet address followed by zero or more IPv4 or IPv6 addresses (or both)
                 An  Ethernet address defined is owned by the logical port.  Like a physical Ethernet NIC, a logical port ordinarily has a single fixed Ethernet
                 address.

                 When a OVN logical switch processes a unicast Ethernet frame whose destination MAC address is in a logical port’s addresses column, it delivers
                 it only to that port, as if a MAC learning process had learned that MAC address on the port.

                 If IPv4 or IPv6 address(es) (or both) are defined, it indicates that the logical port owns the given IP addresses.

                 If  IPv4  address(es)  are defined, the OVN logical switch uses this information to synthesize responses to ARP requests without traversing the
                 physical network. The OVN logical router connected to the logical switch, if any, uses this information to avoid issuing ARP requests for logi‐
                 cal switch ports.

                 Note that the order here is important. The Ethernet address must be listed before the IP address(es) if defined.

                 Examples:

                 80:fa:5b:06:72:b7
                        This indicates that the logical port owns the above mac address.

                 80:fa:5b:06:72:b7 10.0.0.4 20.0.0.4
                        This indicates that the logical port owns the mac address and two IPv4 addresses.

                 80:fa:5b:06:72:b7 fdaa:15f2:72cf:0:f816:3eff:fe20:3f41
                        This indicates that the logical port owns the mac address and 1 IPv6 address.

                 80:fa:5b:06:72:b7 10.0.0.4 fdaa:15f2:72cf:0:f816:3eff:fe20:3f41
                        This indicates that the logical port owns the mac address and 1 IPv4 address and 1 IPv6 address.

          XXX: should we learn the address dynamically?
          unknown
                 This  indicates  that the logical port has an unknown set of Ethernet addresses.  When an OVN logical switch processes a unicast Ethernet frame
                 whose destination MAC address is not in any logical port’s addresses column, it delivers it to the port  (or  ports)  whose  addresses  columns
                 include unknown.

          dynamic
                 Use this keyword to make ovn-northd generate a globally unique MAC address and choose an unused IPv4 address with the logical port’s subnet and
                 store them in the port’s dynamic_addresses column.  ovn-northd will use the  subnet  specified  in  other_config:subnet  in  the  port’s  Logi‐
                 cal_Switch.
*/

table LogicalSwitchPortMAC ( lport : lport_id_t
                           , mac   : mac_addr_t
                           , primary key (mac)
                           , foreign key (lport) references LogicalSwitchPort(id))

table LogicalSwitchPortIP( mac   : mac_addr_t
                         , ip    : ip_addr_t
                         , unique (mac, ip)
                         , foreign key (mac) references LogicalSwitchPortMAC(mac))

table LogicalSwitchPortDynAddr( id    : dynaddr_id_t
                              , lport : lport_id_t
                              , mac   : mac_addr_t  // dynamically allocated
                              , ip    : ip_addr_t   // dynamically allocated
                              , primary key (id)
                              , foreign key (lport) references LogicalSwitchPort(id)
                              , unique (mac)
                              , unique (lport, ip) )



/* LogicalSwitchPort table
   A port within an L2 logical switch.
   Details:
       name: string (must be unique within table)
              The logical port name.

              For entities (VMs or containers) that are spawned in the hypervisor, the name used here must match those used in the exter‐
              nal_ids:iface-id  in the Open_vSwitch database’s Interface table, because hypervisors use external_ids:iface-id as a lookup
              key to identify the network interface of that entity.

              For containers that share a VIF within a VM, the name can be any unique identifier.  See Containers, below, for more infor‐
              mation.

       type: string
              Specify  a  type for this logical port.  Logical ports can be used to model other types of connectivity into an OVN logical
              switch.  The following types are defined:

              (empty string)
                     A VM (or VIF) interface.
              router A connection to a logical router.
              localnet
                     A connection to a locally accessible network from each ovn-controller instance.  A logical switch can  only  have  a
                     single localnet port attached.  This is used to model direct connectivity to an existing network.
              l2gateway
                     A connection to a physical network.
              vtep   A port to a logical switch on a VTEP gateway.

       router-port: optional string
              Required.  The name of the Logical_Router_Port to which this logical switch port is connected.

       nat-addresses: optional string
              MAC address of the router-port followed by a list of SNAT and DNAT IP addresses. This is used to send gratuitous  ARPs  for
              SNAT  and  DNAT  IP addresses via localnet and is valid for only L3 gateway ports.  Example: 80:fa:5b:06:72:b7 158.36.44.22
              158.36.44.24. This would result in generation of gratuitous ARPs for IP addresses 158.36.44.22 and 158.36.44.24 with a  MAC
              address of 80:fa:5b:06:72:b7.
 */
table LogicalSwitchPort( id        : lport_id_t
                       , lswitch   : lswitch_id_t
                       , type      : lport_type_t
                       , name      : string
                       , chassis   : chassis_id_t
                       , enabled   : bool
                       , addr_type : lport_addr_type_t
                       , primary key (id)
                       , foreign key (lswitch) references LogicalSwitch(id)
                       , foreign key (chassis) references Chassis(id)
                       , foreign key (type.rport) references LogicalRouterPort(id) 
                       , foreign key (type.localnet) references PhysicalNetwork(id) 
                       , foreign key (type.pnet) references PhysicalNetwork(id) 
                       , foreign key (type.chassis) references Chassis(id) )

/*
   port_security: set of strings
      This  column  controls  the  addresses  from  which the host attached to the logical port (``the host’’) is allowed to send packets and to which it is
      allowed to receive packets.  If this column is empty, all addresses are permitted.

      Each element in the set must begin with one Ethernet address.  This would restrict the host to sending packets from and receiving packets to the  eth‐
      ernet addresses defined in the logical port’s port_security column. It also restricts the inner source MAC addresses that the host may send in ARP and
      IPv6 Neighbor Discovery packets. The host is always allowed to receive packets to multicast and broadcast Ethernet addresses.

      Each element in the set may additionally contain one or more IPv4 or IPv6 addresses (or both), with optional masks.  If a mask is given, it must be  a
      CIDR  mask.   In  addition to the restrictions described for Ethernet addresses above, such an element restricts the IPv4 or IPv6 addresses from which
      the host may send and to which it may receive packets to the specified addresses.  A masked address, if the host part is zero, indicates that the host
      is allowed to use any address in the subnet; if the host part is nonzero, the mask simply indicates the size of the subnet. In addition:

      ·      If  any IPv4 address is given, the host is also allowed to receive packets to the IPv4 local broadcast address 255.255.255.255 and to IPv4 mul‐
             ticast addresses (224.0.0.0/4).  If an IPv4 address with a mask is given, the host is also allowed to receive packets to the broadcast  address
             in that specified subnet.

             If  any IPv4 address is given, the host is additionally restricted to sending ARP packets with the specified source IPv4 address.  (RARP is not
             restricted.)

      ·      If any IPv6 address is given, the host is also allowed to receive packets to IPv6 multicast addresses (ff00::/8).

             If any IPv6 address is given, the host is additionally restricted to sending IPv6 Neighbor Discovery Solicitation or Advertisement packets with
             the specified source address or, for solicitations, the unspecified address.

      If  an element includes an IPv4 address, but no IPv6 addresses, then IPv6 traffic is not allowed.  If an element includes an IPv6 address, but no IPv4
      address, then IPv4 and ARP traffic is not allowed.

      This column uses the same lexical syntax as the match column in the OVN Southbound database’s Pipeline table.  Multiple addresses  within  an  element
      may be space or comma separated.

      This  column is provided as a convenience to cloud management systems, but all of the features that it implements can be implemented as ACLs using the
      ACL table.
*/
table PortSecurityMAC ( mac   : mac_addr_t
                      , lport : lport_id_t
                      , primary key (mac)
                      , foreign key (lport) references LogicalSwitchPort(id))

table PortSecurityIP ( mac    : mac_addr_t
                     , subnet : ip_subnet_t
                     , lport  : lport_id_t
                     , primary key (mac)
                     , foreign key (lport) references LogicalSwitchPort(id))

// XXX DHCP options

/*
Address_Set TABLE
       Each  row  in  this  table  represents  a named set of addresses.  An address set may contain Ethernet, IPv4, or IPv6 addresses with optional bitwise or CIDR
       masks.  Address set may ultimately be used in ACLs to compare against fields such as ip4.src or ip6.src.  A single address set must contain addresses of  the
       same type. As an example, the following would create an address set with three IP addresses:

             ovn-nbctl create Address_Set name=set1 addresses=’10.0.0.1 10.0.0.2 10.0.0.3’

       Address  sets may be used in the match column of the ACL table.  For syntax information, see the details of the expression language used for the match column
       in the Logical_Flow table of the OVN_Southbound database.

   Summary:
       name                          string (must be unique within table)
       addresses                     set of strings
       Common Columns:
         external_ids                map of string-string pairs

   Details:
       name: string (must be unique within table)
              A name for the address set.  This must be unique among all address sets.

       addresses: set of strings
              The set of addresses in string form.

     Common Columns:

       external_ids: map of string-string pairs
              See External IDs at the beginning of this document.
*/
table AddressSet ( id   : addr_set_id_t
                 , name : string
                 , primary key (id)
                 , unique (name))

table AddressSetAddr ( aset : addr_set_id_t
                     , addr : ip_subnet_t
                     , foreign key (aset) AddressSet(id))

/*
Load_Balancer TABLE
       Each row represents one load balancer.

   Summary:
       vips                          map of string-string pairs
       protocol                      optional string, either udp or tcp
       Common Columns:
         external_ids                map of string-string pairs

   Details:
       vips: map of string-string pairs
              A map of virtual IPv4 addresses (and an optional port number with : as a separator) associated with this load balancer and  their  corresponding  end‐
              point  IPv4  addresses  (and  optional  port  numbers with : as separators) separated by commas.  If the destination IP address (and port number) of a
              packet leaving a container or a VM matches the virtual IPv4 address (and port number) provided here as a key, then OVN  will  statefully  replace  the
              destination  IP  address  by  one  of  the  provided  IPv4  address (and port number) in this map as a value.  Examples for keys are "192.168.1.4" and
              "172.16.1.8:80".  Examples for value are "10.0.0.1, 10.0.0.2" and "20.0.0.10:8800, 20.0.0.11:8800".

       protocol: optional string, either udp or tcp
              Valid protocols are tcp or udp.  This column is useful when a port number is provided as part of the vips column.  If this column is empty and a  port
              number is provided as part of vips column, OVN assumes the protocol to be tcp.

     Common Columns:

       external_ids: map of string-string pairs
              See External IDs at the beginning of this document.
*/

typedef lb_proto_t = LBTCP
                   | LBUDP

// XXX: Does LB belong to a unique switch? Does it apply to packets leaving VMs connected to the switch?
table LoadBalancer ( id      : lb_id_t
                   , name    : string
                   , proto   : lb_proto_t
                   , primary key (id)
                   , foreign key (lswitch) references LogicalSwitch(id))

table LBSwitch ( lb      : lb_id_t
               , lswitch : lswitch_id_t
               , foreign key lb references LoadBalancer (id)
               , foreign key lswitch references LogicalSwitch(id) )


typedef ip4_addr_port = IP4AddrPort { addr : ip4_addr_t
                                    , prt  : bit<16> // 0 means no port
                                    }

table LBVIP ( lb  : lb_id_t
            , vip : ip4_addr_port
            , unique(lb,ip))

table LBIP ( lb  : lb_id_t
           , vip : ip4_addr_port
           , ip  : ip4_addr_port
           , foreign key (lb,vip) references LBVIP(lb,vip) )

/*
ACL TABLE
       Each  row  in  this table represents one ACL rule for a logical switch that points to it through its acls column.  The action column for the highest-priority
       matching row in this table determines a packet’s treatment.  If no row matches, packets are allowed by default.  (Default-deny treatment is possible:  add  a
       rule with priority 0, 0 as match, and deny as action.)

   Summary:
       priority    

                  integer, in range 0 to 32,767
       direction                     string, either to-lport or from-lport
       match                         string
       action                        string, one of allow-related, drop, allow, or reject
       log                           boolean

   Details:
       priority: integer, in range 0 to 32,767
              The  ACL rule’s priority.  Rules with numerically higher priority take precedence over those with lower.  If two ACL rules with the same priority both
              match, then the one actually applied to a packet is undefined.

              Return traffic from an allow-related flow is always allowed and cannot be changed through an ACL.

       direction: string, either to-lport or from-lport
              Direction of the traffic to which this rule should apply:

              ·      from-lport: Used to implement filters on traffic arriving from a logical port.  These rules are applied to the logical switch’s  ingress  pipe‐
                     line.

              ·      to-lport: Used to implement filters on traffic forwarded to a logical port.  These rules are applied to the logical switch’s egress pipeline.

       match: string
              The  packets that the ACL should match, in the same expression language used for the match column in the OVN Southbound database’s Logical_Flow table.
              The outport logical port is only available in the to-lport direction (the inport is available in both directions).

              By default all traffic is allowed.  When writing a more restrictive policy, it is important to remember to allow flows such as ARP and  IPv6  neighbor
              discovery packets.

              Note that you can not create an ACL matching on a port with type=router.

              Note  that when localnet port exists in a lswitch, for to-lport direction, the inport works only if the to-lport is located on the same chassis as the
              inport.
       action: string, one of allow-related, drop, allow, or reject
              The action to take when the ACL rule matches:

              ·      allow: Forward the packet.

              ·      allow-related: Forward the packet and related traffic (e.g. inbound replies to an outbound connection).

              ·      drop: Silently drop the packet.

              ·      reject: Drop the packet, replying with a RST for TCP or ICMP unreachable message for  other  IP-based  protocols.   Not  implemented--currently
                     treated as drop

       log: boolean
              If set to true, packets that match the ACL will trigger a log message on the transport node or nodes that perform ACL processing.  Logging may be com‐
              bined with any action.

              Logging is not yet implemented.
*/

typedef acl_dir_t = ACLTo
                  | ACLFrom

typedef acl_action_t = ACLAllow
                     | ACLAllowRelated
                     | ACLDrop
                     | ACLReject

table ACL ( lswitch    : lswitch_id_t
          , priority   : bit<16>
          , direction  : acl_dir_t
          , match_cond : string
          , action     : acl_action_t
          , foreign key lswitch references LogicalSwitch(id))

/*
Logical_Router TABLE
       Each row represents one L3 logical router.

   Summary:
       name                          string
       ports                         set of Logical_Router_Ports
       static_routes                 set of Logical_Router_Static_Routes
       enabled                       optional boolean
       nat                           set of NATs
       load_balancer                 set of Load_Balancers
       Options:
         chassis           optional string

   Details:
       name: string
              A name for the logical router.  This name has no special meaning or purpose other than to provide convenience for human interaction  with  the  ovn-nb
              database.  There is no requirement for the name to be unique.  The logical router’s UUID should be used as the unique identifier.

       ports: set of Logical_Router_Ports
              The router’s ports.

       static_routes: set of Logical_Router_Static_Routes
              One or more static routes for the router.

       enabled: optional boolean
              This column is used to administratively set router state.  If this column is empty or is set to true, the router is enabled.  If this column is set to
              false, the router is disabled.  A disabled router has all ingress and egress traffic dropped.

       nat: set of NATs
              One or more NAT rules for the router. NAT rules only work on the Gateway routers.

       load_balancer: set of Load_Balancers
              Load balance a virtual ipv4 address to a set of logical port ipv4 addresses.  Load balancer rules only work on the Gateway routers.

     Options:
       Additional options for the logical router.

       chassis: optional string
              If set, indicates that the logical router in question is a Gateway router (which is centralized) and resides in the set chassis.  The  same  value  is
              also  used by ovn-controller to uniquely identify the chassis in the OVN deployment and comes from external_ids:system-id in the Open_vSwitch table of
              Open_vSwitch database.

              The Gateway router can only be connected to a distributed router via a switch if SNAT and DNAT are to be configured in the Gateway router.
*/

typedef lrouter_type_t = RouterRegular
                       | RouterGateway { chassis : chassis_id_t }

table LogicalRouter ( id      : lrouter_id_t 
                    , enabled : bool
                    , name    : string
                    , type    : lrouter_type_t
                    , primary key (id)
                    , foreign key (type.chassis) references Chassis(id))

table LBRouter ( lb      : lb_id_t
               , lrouter : lrouter_id_t
               , foreign key lb references LoadBalancer (id)
               , foreign key lrouter references LogicalRouter(id) )

/* Logical_Router_Port TABLE
       A port within an L3 logical router.

       Exactly one Logical_Router row must reference a given logical router port.

   Summary:
       name                          string (must be unique within table)
       networks                      set of 1 or more strings
       mac                           string
       enabled                       optional boolean
       Attachment:
         peer                        optional string

   Details:
       name: string (must be unique within table)
              A name for the logical router port.

              In addition to provide convenience for human interaction with the ovn-nb database, this column is used  as  reference  by  its  patch  port  in  Logi‐
              cal_Switch_Port or another logical router port in Logical_Router_Port.

       networks: set of 1 or more strings
              The  IP addresses and netmasks of the router.  For example, 192.168.0.1/24 indicates that the router’s IP address is 192.168.0.1 and that packets des‐
              tined to 192.168.0.x should be routed to this port.

              A logical router port always adds a link-local IPv6 address (fe80::/64) automatically generated from the interface’s MAC address  using  the  modified
              EUI-64 format.

       mac: string
              The Ethernet address that belongs to this router port.

       enabled: optional boolean
              This  column  is  used  to administratively set port state.  If this column is empty or is set to true, the port is enabled.  If this column is set to
              false, the port is disabled.  A disabled port has all ingress and egress traffic dropped.

     Attachment:
       A given router port serves one of two purposes:
              ·      To attach a logical switch to a logical router.  A logical router port of this type is referenced by exactly one  Logical_Switch_Port  of  type
                     router.  The value of name is set as router-port in column options of Logical_Switch_Port.  In this case peer column is empty.
              ·      To  connect  one  logical  router to another.  This requires a pair of logical router ports, each connected to a different router.  Each router
                     port in the pair specifies the other in its peer column.  No Logical_Switch refers to the router port.

       peer: optional string
              For a router port used to connect two logical routers, this identifies the other router port in the pair by name.

              For a router port attached to a logical switch, this column is empty.


 */

typedef opt_peer_t = NoPeer
                   | SomePeer { peer : lrouter_port_id_t }

table LogicalRouterPort ( id      : lrouter_port_id_t
                        , name    : string
                        , lrouter : lrouter_id_t
                        , mac     : mac_addr_t
                        , enabled : bool
                        , peer    : opt_peer_t
                        , primary key (id)
                        , unique (lrouter, name)
                        , unique (mac)
                        , foreign key lrouter references LogicalRouter(id)
                        , foreign key peer.peer references LogicalRouterPort)

table LRouterPortNetwork ( lport   : lrouter_port_id_t
                         , network : ip_subnet_t 
                         , foreign key lport references LogicalRouterPort(id) )

/* Logical_Router_Static_Route TABLE
       Each record represents a static route.

   Summary:
       ip_prefix                     string
       nexthop                       string
       output_port                   optional string

   Details:
       ip_prefix: string
              IP prefix of this route (e.g. 192.168.100.0/24).

       nexthop: string
              Nexthop IP address for this route.  Nexthop IP address should be the IP address of a connected router port or the IP address of a logical port.

       output_port: optional string
              The name of the Logical_Router_Port via which the packet needs to be sent out.  This is optional and when not specified, OVN will automatically figure
              this out based on the nexthop.
 */

table LogicalRouterStaticRoute ( lrouter     : lrouter_id_t
                               , ip_prefix   : ip_subnet_t
                               , nexthop     : ip_addr_t
                               , output_port : opt_peer_t
                               , foreign key (output_port.peer) references LogicalRouter(id) )

/* NAT TABLE
       Each record represents a NAT rule in a Gateway router.

   Summary:
       type                          string, one of snat, dnat, or dnat_and_snat
       external_ip                   string
       logical_ip                    string

   Details:
       type: string, one of snat, dnat, or dnat_and_snat
              Type of the NAT rule.

              ·      When type is dnat, the externally visible IP address external_ip is DNATted to the IP address logical_ip in the logical space.

              ·      When  type  is  snat, IP packets with their source IP address that either matches the IP address in logical_ip or is in the network provided by
                     logical_ip is SNATed into the IP address in external_ip.

              ·      When type is dnat_and_snat, the externally visible IP address external_ip is DNATted to the IP address logical_ip  in  the  logical  space.  In
                     addition, IP packets with the source IP address that matches logical_ip is SNATed into the IP address in external_ip.

       external_ip: string
              An IPv4 address.

       logical_ip: string
              An IPv4 network (e.g 192.168.1.0/24) or an IPv4 address.
*/
typedef nat_type_t = SNAT
                   | DNAT
                   | DNAT_SNAT

table NAT ( lrouter     : lrouter_id_t
          , type        : nat_type_t
          , external_ip : ip4_addr_t
          , logical_ip  : ip4_subnet_t
          , foreign key (lrouter) references LogicalRouter(id) )

table PhysicalNetwork( id   : pnet_id_t
                     , name : string
                     , primary key (id) )

table Chassis ( id : chassis_id_t
              , primary key (id) )
